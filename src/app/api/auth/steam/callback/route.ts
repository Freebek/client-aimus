import { NextRequest, NextResponse } from "next/server";

export async function GET(req: NextRequest) {
  try {
    const { searchParams } = new URL(req.url);

    const claimedId = searchParams.get("openid.claimed_id");
    console.log("üîÑ CALLBACK params:", searchParams.toString());
    console.log("‚úÖ claimed_id:", claimedId);

    if (!claimedId) {
      return NextResponse.json(
        { error: "Steam –Ω–µ –≤–µ—Ä–Ω—É–ª claimed_id" },
        { status: 400 }
      );
    }

    // ‚úÖ –ü–∞—Ä—Å–∏–º SteamID
    const steamIdMatch = claimedId.match(/\d+$/);
    const steamId = steamIdMatch ? steamIdMatch[0] : null;

    if (!steamId) {
      return NextResponse.json(
        { error: "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å SteamID" },
        { status: 400 }
      );
    }

    console.log("‚úÖ SteamID:", steamId);

    // ‚úÖ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ Web API
    const apiKey = process.env.STEAM_API_KEY;
    if (!apiKey) {
      throw new Error("‚ùå STEAM_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env.local");
    }

    const response = await fetch(
      `https://api.steampowered.com/ISteamUser/GetPlayerSummaries/v2/?key=${apiKey}&steamids=${steamId}`
    );

    if (!response.ok) {
      throw new Error(`‚ùå Steam API –≤–µ—Ä–Ω—É–ª ${response.status}`);
    }

    const data = await response.json();
    const player = data?.response?.players?.[0];

    if (!player) {
      throw new Error("‚ùå Steam API –Ω–µ –≤–µ—Ä–Ω—É–ª player");
    }

    console.log("‚úÖ Steam Profile:", player);

    const params = new URLSearchParams({
      personaname: player.personaname,
      avatar: player.avatarfull,
      steamid: player.steamid,
      profileurl: player.profileurl,
    });

    return NextResponse.redirect(`/steamProfile?${params.toString()}`);
  } catch (err: any) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –≤ Steam callback:", err.message);
    return NextResponse.json({ error: err.message }, { status: 500 });
  }
}
